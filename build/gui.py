# This GUI was designed by Tanzim Ikram Sheikh
# Follow me on GitHub: https://github.com/tanzim-ikram
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

# For Serial Data
from serialdata import SerialComm

# For Displaying Time:
from datetime import datetime
import pytz

# For Graphs
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

# For Path Finding
from pathlib import Path

# For GUI
import tkinter
from tkinter import Tk, Canvas, PhotoImage

GRAPH_FACE_COLOR = "#1D1D1D"

OUTPUT_PATH = Path(__file__).parent

# Change the path location according to you folder location
ASSETS_PATH = OUTPUT_PATH / Path(r"G:\AERD\Projects\CanSat\GUI\AERD-Cansat\build\assets\frame0")


# ---------------------------------Time Function Starts ---------------------------------
def update_time():
    # Get the current time in UTC
    current_utc_time = datetime.now(pytz.utc)

    # Convert UTC time to Bangladesh time (UTC+6)
    bd_timezone = pytz.timezone("Asia/Dhaka")
    current_bd_time = current_utc_time.astimezone(bd_timezone)

    # Format the time as a string
    time_str = current_bd_time.strftime('%H:%M:%S')

    # Update the text on the canvas
    canvas.itemconfig(time_text, text=time_str + " UTC+6")

    # Call update_time function after 1000ms (1 second)
    window.after(1000, update_time)


# --------------------------------- Time Function Ends ---------------------------------

# ---------------------------------- Graph Start ----------------------------------
# Function to update data
def update_data():
    global altitude, temperature, humidity, pressure, aqi, uv_index, co2_level, time_data, velocity

    # Assuming SerialComm class updates these variables, replace with actual data retrieval logic
    altitude.append(float(serial_comm.sensor_values[2].get()))
    temperature.append(float(serial_comm.sensor_values[4].get()))
    humidity.append(float(serial_comm.sensor_values[5].get()))
    pressure.append(float(serial_comm.sensor_values[6].get()))
    aqi.append(float(serial_comm.sensor_values[7].get()))
    uv_index.append(float(serial_comm.sensor_values[9].get()))
    co2_level.append(float(serial_comm.sensor_values[8].get()))
    time_data.append(time_data[-1] + 1)
    velocity.append(float(serial_comm.sensor_values[10].get()))

    # Limit data points to maintain a reasonable number (adjust as needed)
    data_limit = 50
    if len(altitude) > data_limit:
        del altitude[0]
        del temperature[0]
        del humidity[0]
        del pressure[0]
        del aqi[0]
        del uv_index[0]
        del co2_level[0]
        del time_data[0]
        del velocity[0]


# Initialize data
altitude = [0]
temperature = [20]
humidity = [50]
pressure = [1000]
aqi = [50]
uv_index = [5]
co2_level = [400]
time_data = [0]
velocity = [0]

# Create a figure and axis for Altitude vs Temperature graph
fig_altitude_temperature = Figure(figsize=(3.05, 1.5), facecolor=GRAPH_FACE_COLOR)
ax_altitude_temperature = fig_altitude_temperature.add_subplot()
ax_altitude_temperature.set_facecolor(GRAPH_FACE_COLOR)
ax_altitude_temperature.plot(altitude, temperature, color="orange")
ax_altitude_temperature.fill_between(altitude, temperature, alpha=0.5, color="orange")
ax_altitude_temperature.tick_params(labelsize=7, colors="white")
fig_altitude_temperature.autofmt_xdate()
ax_altitude_temperature.grid(visible=True)

# Create a figure and axis for Altitude vs Humidity graph
fig_altitude_humidity = Figure(figsize=(3.05, 1.5), facecolor=GRAPH_FACE_COLOR)
ax_altitude_humidity = fig_altitude_humidity.add_subplot()
ax_altitude_humidity.set_facecolor(GRAPH_FACE_COLOR)
ax_altitude_humidity.plot(altitude, humidity, color="deepskyblue")
ax_altitude_humidity.fill_between(altitude, humidity, alpha=0.5, color="deepskyblue")
ax_altitude_humidity.tick_params(labelsize=7, colors="white")
fig_altitude_humidity.autofmt_xdate()
ax_altitude_humidity.grid(visible=True)

# Create a figure and axis for Altitude vs Pressure graph
fig_altitude_pressure = Figure(figsize=(3.05, 1.5), facecolor=GRAPH_FACE_COLOR)
ax_altitude_pressure = fig_altitude_pressure.add_subplot()
ax_altitude_pressure.set_facecolor(GRAPH_FACE_COLOR)
ax_altitude_pressure.plot(altitude, pressure, color="lightgreen")
ax_altitude_pressure.fill_between(altitude, pressure, alpha=0.5, color="lightgreen")
ax_altitude_pressure.tick_params(labelsize=7, colors="white")
fig_altitude_pressure.autofmt_xdate()
ax_altitude_pressure.grid(visible=True)

# Create a figure and axis for Altitude vs AQI, UV Index, and CO2 Level graph
fig_altitude_metrics = Figure(figsize=(6.2, 2.3), facecolor=GRAPH_FACE_COLOR)
ax_altitude_metrics = fig_altitude_metrics.add_subplot()
ax_altitude_metrics.set_facecolor(GRAPH_FACE_COLOR)
ax_altitude_metrics.plot(altitude, aqi, color="red", label="AQI")
ax_altitude_metrics.plot(altitude, uv_index, color="blue", label="UV Index")
ax_altitude_metrics.plot(altitude, co2_level, color="green", label="CO2 Level")
ax_altitude_metrics.fill_between(altitude, aqi, alpha=0.5, color="red")
ax_altitude_metrics.fill_between(altitude, uv_index, alpha=0.5, color="purple")
ax_altitude_metrics.fill_between(altitude, co2_level, alpha=0.5, color="cyan")
ax_altitude_metrics.tick_params(labelsize=7, colors="white")
ax_altitude_metrics.grid(visible=True)
ax_altitude_metrics.legend()

# Create a figure and axis for Time vs Altitude and Velocity graph
fig_time_altitude_velocity = Figure(figsize=(6.2, 2.3), facecolor=GRAPH_FACE_COLOR)
ax_time_altitude_velocity = fig_time_altitude_velocity.add_subplot()
ax_time_altitude_velocity.set_facecolor(GRAPH_FACE_COLOR)
ax_time_altitude_velocity.plot(time_data, altitude, color="green", label="Altitude")
ax_time_altitude_velocity.plot(time_data, velocity, color="blue", label="Velocity")
ax_time_altitude_velocity.fill_between(time_data, altitude, alpha=0.5, color="green")
ax_time_altitude_velocity.fill_between(time_data, velocity, alpha=0.5, color="blue")
ax_time_altitude_velocity.tick_params(labelsize=7, colors="white")
fig_time_altitude_velocity.autofmt_xdate()
ax_time_altitude_velocity.grid(visible=True)
ax_time_altitude_velocity.legend()


# Update data and plot every second
def animate():
    update_data()

    # Update Altitude vs Temperature graph
    ax_altitude_temperature.clear()
    ax_altitude_temperature.plot(altitude, temperature, color="orange")
    ax_altitude_temperature.fill_between(altitude, temperature, alpha=0.5, color="orange")
    ax_altitude_temperature.tick_params(labelsize=7, colors="white")
    ax_altitude_temperature.grid(visible=True)
    canvas_ani_temp.draw()

    # Update Altitude vs Humidity graph
    ax_altitude_humidity.clear()
    ax_altitude_humidity.plot(altitude, humidity, color="deepskyblue")
    ax_altitude_humidity.fill_between(altitude, humidity, alpha=0.7, color="deepskyblue")
    ax_altitude_humidity.tick_params(labelsize=7, colors="white")
    ax_altitude_humidity.grid(visible=True)
    canvas_ani_hum.draw()

    # Update Altitude vs Pressure graph
    ax_altitude_pressure.clear()
    ax_altitude_pressure.plot(altitude, pressure, color="lightgreen")
    ax_altitude_pressure.fill_between(altitude, pressure, alpha=0.7, color="lightgreen")
    ax_altitude_pressure.tick_params(labelsize=7, colors="white")
    ax_altitude_pressure.grid(visible=True)
    canvas_ani_press.draw()

    # Update Altitude vs AQI, UV Index, and CO2 Level graph
    ax_altitude_metrics.clear()
    ax_altitude_metrics.plot(altitude, aqi, color="red", label="AQI")
    ax_altitude_metrics.plot(altitude, uv_index, color="blue", label="UV Index")
    ax_altitude_metrics.plot(altitude, co2_level, color="green", label="CO2 Level")
    ax_altitude_metrics.fill_between(altitude, aqi, alpha=0.5, color="red")
    ax_altitude_metrics.fill_between(altitude, uv_index, alpha=0.5, color="blue")
    ax_altitude_metrics.fill_between(altitude, co2_level, alpha=0.5, color="green")
    ax_altitude_metrics.tick_params(labelsize=7, colors="white")
    ax_altitude_metrics.grid(visible=True)
    ax_altitude_metrics.legend(loc='upper left', bbox_to_anchor=(0.85, 1.2))
    canvas_altitude_metrics.draw()

    # Update Time vs Altitude and Velocity graph
    ax_time_altitude_velocity.clear()
    ax_time_altitude_velocity.plot(time_data, altitude, color="green", label="Altitude")
    ax_time_altitude_velocity.plot(time_data, velocity, color="blue", label="Velocity")
    ax_time_altitude_velocity.fill_between(time_data, altitude, alpha=0.5, color="green")
    ax_time_altitude_velocity.fill_between(time_data, velocity, alpha=0.5, color="blue")
    ax_time_altitude_velocity.tick_params(labelsize=7, colors="white")
    ax_time_altitude_velocity.grid(visible=True)
    ax_time_altitude_velocity.legend(loc='upper left')
    canvas_ani_time_vel.draw()

    window.after(1000, animate)


# ----------------------------------- Graph End -----------------------------------

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.title("AERD CanSat")
window.geometry("1280x720")
window.configure(bg="#121212")

canvas = tkinter.Canvas(window, bg="#121212", height=720, width=1280, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

canvas = Canvas(
    window,
    bg="#121212",
    height=720,
    width=1280,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

# Display Map

canvas.create_rectangle(
    13.0,
    239.0,
    321.0,
    558.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    150.208251953125,
    241.3922119140625,
    anchor="nw",
    text="Map",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# Display Time

canvas.create_rectangle(
    14.0,
    12.0,
    321.0,
    83.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    149.0,
    14.429290771484375,
    anchor="nw",
    text="Time",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

time_text = canvas.create_text(
    80.0,
    45.0,
    anchor="nw",
    text="",
    fill="#F7DC6F",
    font=("Inter ExtraBold", 24 * -1)
)

# Voltage Meter

canvas.create_rectangle(
    14.0,
    87.0,
    321.0,
    158.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    139.0,
    90.0,
    anchor="nw",
    text="Voltage",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

canvas.create_text(
    123.0,
    119.0,
    anchor="nw",
    text="4.725 V",
    fill="#27AE60",
    font=("Inter Medium", 24 * -1)
)

# RSSI Meter

canvas.create_rectangle(
    14.0,
    163.0,
    321.0,
    233.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    152.0,
    165.0,
    anchor="nw",
    text="RSSI",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

canvas.create_text(
    122.0,
    194.0,
    anchor="nw",
    text="-103 dB",
    fill="#E74C3C",
    font=("Inter Medium", 24 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    167.0,
    410.0,
    image=image_image_1
)

# Latitude

canvas.create_rectangle(
    13.0,
    563.0,
    164.0,
    632.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    61.0,
    564.3728160317987,
    anchor="nw",
    text="Latitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

latitude_text = canvas.create_text(
    50.0,
    594.0,
    anchor="nw",
    text="0",
    fill="#76C7FE",
    font=("Inter Medium", 20 * -1)
)

# Altitude

canvas.create_rectangle(
    327.0,
    12.0,
    478.0,
    83.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    374.0,
    15.0,
    anchor="nw",
    text="Altitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

altitude_text = canvas.create_text(
    355.0,
    47.0,
    anchor="nw",
    text="0",
    fill="#76C7FE",
    font=("Inter Medium", 20 * -1)
)

# Altitude vs Temperature

canvas.create_rectangle(
    327.0,
    163.0,
    633.0159301757812,
    341.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    398.0,
    165.0,
    anchor="nw",
    text="Altitude vs Temperature",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 13 * -1)
)

# Altitude vs Temperature Graph
# Embed Altitude vs Temperature graph in canvas
canvas_ani_temp = FigureCanvasTkAgg(fig_altitude_temperature, master=canvas)
canvas_ani_temp.draw()
canvas_ani_temp.get_tk_widget().place(x=327.5, y=190.5)

# Altitude vs Humidity

canvas.create_rectangle(
    327.0,
    346.0,
    633.0159301757812,
    524.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    413.0,
    349.0,
    anchor="nw",
    text="Altitude vs Humidity",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 13 * -1)
)

# Altitude vs Humidity Graph
# Embed Altitude vs Humidity graph in canvas
canvas_ani_hum = FigureCanvasTkAgg(fig_altitude_humidity, master=canvas)
canvas_ani_hum.draw()
canvas_ani_hum.get_tk_widget().place(x=327.5, y=365.5)

# Altitude vs Pressure

canvas.create_rectangle(
    327.0,
    529.0,
    633.0159301757812,
    707.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    415.0,
    532.0,
    anchor="nw",
    text="Altitude vs Pressure",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 13 * -1)
)

# Altitude vs Pressure Graph
# Embed Altitude vs Pressure graph in canvas
canvas_ani_press = FigureCanvasTkAgg(fig_altitude_pressure, master=canvas)
canvas_ani_press.draw()
canvas_ani_press.get_tk_widget().place(x=327.5, y=550.5)

# Altitude vs AQI, UV Index, CO2 Level

canvas.create_rectangle(
    639.0,
    164.0,
    1267.0,
    432.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    829.0,
    167.0,
    anchor="nw",
    text="Altitude vs AQI, UV Index, CO2 Level",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# Altitude Vs AQI, UV Index, CO2 Level Graph
# Embed Altitude vs AQI, UV Index, and CO2 Level graph in canvas
canvas_altitude_metrics = FigureCanvasTkAgg(fig_altitude_metrics, master=canvas)
canvas_altitude_metrics.draw()
canvas_altitude_metrics.get_tk_widget().place(x=640.0, y=190.0)

# Time vs Altitude and Velocity

canvas.create_rectangle(
    639.0,
    439.0,
    1267.0,
    707.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    850.0,
    442.0,
    anchor="nw",
    text="Time vs Altitude and Velocity",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# Time vs Altitude and Velocity Graph
# Embed Time vs Altitude and Velocity graph in canvas
canvas_ani_time_vel = FigureCanvasTkAgg(fig_time_altitude_velocity, master=canvas)
canvas_ani_time_vel.draw()
canvas_ani_time_vel.get_tk_widget().place(x=640.0, y=480.0)

# Longitude

canvas.create_rectangle(
    170.0,
    563.0,
    321.0,
    632.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    211.0,
    566.718994140625,
    anchor="nw",
    text="Longitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

longitude_text = canvas.create_text(
    210.0,
    594.0,
    anchor="nw",
    text="0",
    fill="#76C7FE",
    font=("Inter Medium", 20 * -1)
)

# Packet Count

canvas.create_rectangle(
    482.0,
    12.0,
    633.0,
    83.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    509.0,
    15.0,
    anchor="nw",
    text="Packet Count",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

packet_count_text = canvas.create_text(
    541.0,
    47.0,
    anchor="nw",
    text="0",
    fill="#76C7FE",
    font=("Inter Medium", 20 * -1)
)

# Temperature

canvas.create_rectangle(
    13.0,
    638.0,
    164.0,
    707.0,
    fill="#1D1D1D",
    outline="")

temperature_text = canvas.create_text(
    47.0,
    673.0,
    anchor="nw",
    text="0",
    fill="#F7DC6F",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    42.0,
    642.0,
    anchor="nw",
    text="Temperature",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# Humidity

canvas.create_rectangle(
    169.0,
    638.0,
    321.0,
    707.0,
    fill="#1D1D1D",
    outline="")

humidity_text = canvas.create_text(
    200.0,
    673.0,
    anchor="nw",
    text="0",
    fill="#8DECFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    214.0,
    642.0,
    anchor="nw",
    text="Humidity",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# CO2 Level

canvas.create_rectangle(
    482.0,
    87.0,
    633.0,
    158.0,
    fill="#1D1D1D",
    outline="")

co2_level_text = canvas.create_text(
    508.0,
    121.0,
    anchor="nw",
    text="0",
    fill="#FFB2A2",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    522.0,
    89.0,
    anchor="nw",
    text="CO2 Level",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# UV Index

canvas.create_rectangle(
    327.0,
    87.0,
    478.0,
    158.0,
    fill="#1D1D1D",
    outline="")

uv_index_text = canvas.create_text(
    376.0,
    122.0,
    anchor="nw",
    text="0",
    fill="#C466F5",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    371.0,
    89.0,
    anchor="nw",
    text="UV Index",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# Velocity

canvas.create_rectangle(
    639.0,
    12.0,
    844.0,
    158.0,
    fill="#1D1D1D",
    outline="")

velocity_text = canvas.create_text(
    708.0,
    60.0,
    anchor="nw",
    text="0",
    fill="#8DECFF",
    font=("Inter Medium", 24 * -1)
)

canvas.create_text(
    709.0199584960938,
    16.09814453125,
    anchor="nw",
    text="Velocity",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# Pressure

canvas.create_rectangle(
    851.0,
    12.0,
    1056.0,
    158.0,
    fill="#1D1D1D",
    outline="")

pressure_text = canvas.create_text(
    915.0,
    70.0,
    anchor="nw",
    text="0",
    fill="#86FFC6",
    font=("Inter Medium", 24 * -1)
)

canvas.create_text(
    925.0,
    16.0,
    anchor="nw",
    text="Pressure",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)

# AQI

canvas.create_rectangle(
    1062.0,
    12.0,
    1267.0,
    158.0,
    fill="#1D1D1D",
    outline="")

aqi_text = canvas.create_text(
    1137.0,
    66.0,
    anchor="nw",
    text="0",
    fill="#D5FFFF",
    font=("Inter Medium", 24 * -1)
)

canvas.create_text(
    1145.0,
    16.09814453125,
    anchor="nw",
    text="AQI",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 14 * -1)
)


# Create an instance of the SerialComm class to manage serial communication
serial_comm = SerialComm(window)


# Update GUI with data from serial
def update_gui_with_serial_data():
    canvas.itemconfig(latitude_text, text=serial_comm.sensor_values[0].get())
    canvas.itemconfig(longitude_text, text=serial_comm.sensor_values[1].get())
    canvas.itemconfig(altitude_text, text=serial_comm.sensor_values[2].get() + " km")
    canvas.itemconfig(packet_count_text, text=serial_comm.sensor_values[3].get())
    canvas.itemconfig(temperature_text, text=serial_comm.sensor_values[4].get() + " °C")
    canvas.itemconfig(humidity_text, text=serial_comm.sensor_values[5].get() + " %H")
    canvas.itemconfig(pressure_text, text=serial_comm.sensor_values[6].get() + "\n   hPa")
    canvas.itemconfig(aqi_text, text=serial_comm.sensor_values[7].get() + "\nug/m3")
    canvas.itemconfig(co2_level_text, text=serial_comm.sensor_values[8].get() + " ppm")
    canvas.itemconfig(uv_index_text, text=serial_comm.sensor_values[9].get())
    canvas.itemconfig(velocity_text, text=serial_comm.sensor_values[10].get() + "\nkm/h")

    window.after(100, update_gui_with_serial_data)  # Update GUI every 100ms


# Start updating the time and GUI with serial data
update_time()
update_gui_with_serial_data()

animate()
window.resizable(True, True)
window.mainloop()
